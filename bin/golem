#!/usr/bin/python
#
# The main golem scheduler, it reads incoming updates from a beanstalk queue,
# updates repositories and schedules jobs.

import beanstalkc
import docopt
from golem import ConfigParser
import json
import logging.config
import golem.daemon
import golem.repository
try:
    import prctl
except ImportError:
    class prctl(object):
        set_name = lambda *args: None
        set_proctitle = lambda *args: None
import sys
import functools
import os
from whelk import shell

usage = """Golem queueing daemon

Usage:
  golem [--config=<config>] --master [--daemon] [--instance=<instance>]
  golem [--config=<config>] --worker=<worker> [--daemon] [--instance=<instance>]
  golem [--config=<config>] --submit [<repo> [<ref> <old-sha1> <new-sha1>]]
  golem [--config=<config>] --login=<service>

Options:
  -h --help                 Show this help message and exit
  -c=<file> --config=<file> Use a different configuration than the default
  --daemon                  Run as a daemon in the background
  --master                  Run the scheduler. When running instance 1, start the helpers too
  --worker=<worker>         Run the specified worker instead of the master
  --instance=<instance>     Start a numbered instance of worker/master
"""

defaults = {
    'logger':           'golem.master',
    'beanstalk_server': 'localhost:11300',
    'submit_queue':     'golem-updates',
    'chems':            '/etc/golem/chems',
    'repos':            '/var/lib/golem/repos',
    'rsync_root':       '',
    'rsync_password':   '',
    'rsync_hardlink':   '',
    'instances':        1,
}

opts = docopt.docopt(usage)
default_config = '/etc/golem/golem.conf'
config = opts['--config'] or default_config
parser = ConfigParser(config, defaults)

if opts['--login']:
    if opts['--service'] == 'github':
        cf = os.path.join(os.path.expanduser('~'), '.githubconfig-golem')
        if os.path.exists(cf):
            os.unlink(cf)
        golem.repository.github(try_login=True)
    else:
        print >>sys.stderr, "Unknown service: %s" % opts['<service>']
        sys.sxit(1)
    sys.exit(0)

bs_host, bs_port = parser.get('golem', 'beanstalk_server').split(':')
bs_port  = int(bs_port)
bs_queue = parser.get('golem', 'submit_queue')

if opts['--submit']:
    if not opts['<repo>']:
        res = shell.git('rev-parse', '--git-dir', stderr=None)
        if res.returncode == 0:
            sys.exit(res.returncode)
        git_dir = os.path.abspath(res.stdout.strip())
        if shell.git('rev-parse', '--is-bare-repository').stdout.strip() == 'false':
            opts['<repo>'] = os.path.basename(os.path.dirname(git_dir))
        else:
            opts['<repo>'] = os.path.basename(git_dir)
            if opts['<repo>'].endswith('.git'):
                otps['<repo>'] = opts['<repo>'][:-4]
    to_submit = []
    if opts['<ref>'] or sys.stdin.isatty():
        to_submit.append({'repo': opts['<repo>'], 'ref': opts['<ref>'], 'old-sha1': opts['<old-sha1>'], 'new-sha1': opts['<new-sha1>'], 'update': True})
    if not sys.stdin.isatty():
        for line in sys.stdin.readlines():
            old_sha1, new_sha1, ref = line.strip().split()
            to_submit.append({'repo': opts['<repo>'], 'ref': ref, 'old-sha1': old-sha1, 'new-sha1': new-sha1, 'update': True})
    bs = beanstalkc.Connection(bs_host, bs_port)
    bs.use(bs_queue)
    for thing in to_submit:
        bs.put(json.dumps(thing), ttr=600)
        print "Notified golem of the update to %s" % thing['repo']
    sys.exit(0)

# Now we start daemons
logging.config.fileConfig(config)
logger = parser.get('golem', 'logger')
def change_logfile(filename=None, instance=None):
    if instance and not instance.isdigit():
        print >>sys.stderr, "Invalid value for --instance, must be a number"
        sys.exit(1)
    for handler in logging.root.handlers + functools.reduce(lambda x,y: x+y, [x.handlers for x in logging.Logger.manager.loggerDict.values()], []):
        if hasattr(handler, 'baseFilename'):
            path, fn = os.path.split(handler.baseFilename)
            fn, ext = os.path.splitext(fn)
            if not filename:
                filename = fn
            if instance:
                filename += '-%s' % instance
            handler.baseFilename = os.path.join(path, filename + ext)

if opts['--worker']:
    name = opts['--worker']
    parser._defaults['repos'] = '/var/lib/golem/workers'
    parser._defaults['queue'] = 'golem-%s' % name
    parser._defaults['logger'] = 'golem.worker.%s' % name
    parser._defaults['module'] = 'golem.worker.%s' % name.replace('-', '_')
    prctl.set_name("golem %s" % name)
    prctl.set_proctitle(' '.join(sys.argv))
    change_logfile(opts['--worker'], opts['--instance'])

    logger = parser.get([name, 'worker'], 'logger')
    repos = parser.get([name, 'worker'], 'repos')
    wk_queue = parser.get([name, 'worker'], 'queue')
    rsync_root = parser.get([name, 'worker'], 'rsync_root')
    rsync_password = parser.get([name, 'worker'], 'rsync_password')
    rsync_hardlink = parser.get([name, 'worker'], 'rsync_hardlink')
    module = parser.get('worker', 'module')

    daemon = __import__(module)
    daemon = sys.modules[module].Daemon(logger, bs_host, bs_port, wk_queue, repos, bs_queue, rsync_root, rsync_hardlink, rsync_password)
else:
    prctl.set_name("golemd")
    prctl.set_proctitle(' '.join(sys.argv))
    if opts['--instance']:
        change_logfile(instance=opts['--instance'])

    logger = parser.get('master', 'logger')
    repos = parser.get('master', 'repos')
    chems = parser.get('master', 'chems')
    daemon = golem.daemon.Master(logger, bs_host, bs_port, bs_queue, repos, chems)
    # XXX start workers

if opts['--daemon']:
    daemon.daemonize()
daemon.run()

