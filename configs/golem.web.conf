import os
import ConfigParser
import golem.repository
import golem.db

CONFIG = os.path.join(os.path.dirname(__file__), 'golem.conf')

parser = ConfigParser.ConfigParser()
parser.read(CONFIG)

REPODIR = parser.get('master', 'repos')
DB = golem.db.create_engine(parser.get('master', 'db'), pool_recycle=3600)
BEANSTALK_SERVER = parser.get('golem', 'beanstalk_server')
SUBMIT_QUEUE = parser.get('golem', 'submit_queue')
CHEMS = parser.get('master', 'chems')
REPOS = {}
class Master(object):
    repo_dir = REPODIR
    dummy = True
master = Master
db = DB.connect()
for file in os.listdir(CHEMS):
    if not file.endswith('.conf'):
        continue
    repo = golem.repository.Repository(master, os.path.join(CHEMS, file), db)
    REPOS[repo.name] = repo
db.close()

# Use debug mode based on the GOLEM_DEBUG environment variable
DEBUG = os.environ.get('GOLEM_DEBUG', 'False').lower() == 'true'
# vim:syntax=python
